#!/usr/bin/env python3

import json
import argparse

from arbitrum.evm.contract import ArbContract, create_evm_vm
from arbitrum.marshall import marshall_vm

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("input_file", help="Json file generated with evm code produced by truffle")
    parser.add_argument("output_file", help="File location to save produced AVM binary")
    parser.add_argument("-d", "--debug-output", type=str,
                    help="File location to save produced debug output")
    parser.add_argument("--optimize-off",
                    help="Don't perform any optimization in the compiler", action="store_true", default=False)
    args = parser.parse_args()

    with open(args.input_file) as json_file:
        raw_contracts = json.load(json_file)

    contracts = [ArbContract(contract) for contract in raw_contracts]
    for contract in contracts:
        print(contract.name, contract.address)
    vm = create_evm_vm(contracts, not args.optimize_off)
    print(len(vm.code))

    with open(args.output_file, "wb") as f:
        marshall_vm(vm, f)

    if args.debug_output:
        with open(args.debug_output, "w") as f:
            for instr in vm.code:
                f.write("{} {}".format(instr, instr.path))
                f.write("\n")
